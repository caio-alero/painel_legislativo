sapl_data <- readRDS('dados_sapl.rds') %>% as_tibble()
sapl_data <- merge(sapl_data, agrupamento_status, by.y = 'status')
shiny::runApp()
?merge
inner_join(agrupamento_status, sapl_data)
# dados das materias ----
agrupamento_status <- read.table('agrupamento_status.txt', sep = '\t', header = TRUE) %>% as_tibble()
sapl_data <- readRDS('dados_sapl.rds') %>% as_tibble()
inner_join(agrupamento_status, sapl_data)
sapl_data$status
sapl_data$status
agrupamento_status$status
sapl_data$status %>% table()
sapl_data$status %>% unique()
agrupamento_status$status
sapl_data$status %>% unique() == agrupamento_status$status
sapl_data <- merge(sapl_data, agrupamento_status, by.y = 'status')
inner_join(agrupamento_status, sapl_data, by = 'status')
inner_join(agrupamento_status, sapl_data, by = 'status') %>% View()
sapl_data <- merge(sapl_data, agrupamento_status, by.y = 'status')
sapl_data <- merge.data.frame(sapl_data, agrupamento_status, by.y = 'status')
sapl_data <- merge(sapl_data, agrupamento_status, by.y = 'status')
shiny::runApp()
sapl_data
sapl_data <- merge(sapl_data, agrupamento_status, y = 'status')
sapl_data <- merge(sapl_data, agrupamento_status, by = 'status')
sapl_data
sapl_data %>% View()
dados_sapl <- readRDS("~/GitHub/painel_legislativo/dados_sapl.rds")
dados_sapl
library(rvest)      # web scrapping
library(dplyr)      # manipular dados
library(stringr)    # manipular os textos
library(xml2)       # ler html
library(jbkmisc)
library(tm)
# o código de scrape a seguir serve tanto para PLO como PLC
# tipos de materia: PLO, PLC, VP
# uma_pagina = TRUE ou FALSE
#sapl_scrap <- function(URL, tipo_materia = NULL, uma_pagina = FALSE) {
sapl_scrap <- function(URL, uma_pagina = FALSE) {
# extraindo o numero total de paginas
num_total_pages <- ifelse(uma_pagina,
1,
str_replace(URL, 'page=PAGE&', '') %>%
read_html() %>%
xml_find_all('//nav/ul') %>%
xml_text() %>%
str_clean() %>%
str_match_all('[0-9]+') %>%
unlist() %>%
as.numeric() %>%
max())
# scrapping das ementas
num_projeto <- list()
data_apresentacao <- list()
localizacao_atual <- list()
autor <- list()
ementas <- list()
status <- list()
data_ultima_tram <- list()
resultado <- list()
for(i in 1:num_total_pages) {
url <- str_replace(URL, 'PAGE', as.character(i))
pagina <- read_html(url) %>% xml_root()
# numero de materia
nodes_link <- xml_find_all(pagina, '//td//a')
#num_projeto[[i]] <- xml_text(nodes_link)[str_detect(xml_text(nodes_link), tipo_materia)]
num_projeto[[i]] <- xml_text(nodes_link)[!(xml_text(nodes_link) %in% c('Texto Original', '', 'Acompanhar Matéria'))]
num_projeto[[i]] <- num_projeto[[i]][!str_detect(num_projeto[[i]], pattern = '\n')]
# textos
textos <- xml_find_all(pagina, '//td') %>%
xml_text() %>%
str_clean()
textos <- textos[textos != ' ']
textos <- textos[-1]
#-----------------------------------------------------------------------------------------------------------
#                 data de apresentacao
#-----------------------------------------------------------------------------------------------------------
data_apresentacao[[i]] <- xml_find_all(pagina, '//td/text()[6]') %>%
xml_text() %>%
str_clean() %>%
str_trim()
#-----------------------------------------------------------------------------------------------------------
#                  AUTORIA
#-----------------------------------------------------------------------------------------------------------
autores <- ifelse(str_detect(textos, 'Autor: '),
ifelse(str_detect(textos, 'Localização Atual'),
gsub('.*Autor: (.+) Localização Atual.*', '\\1', textos),
removeWords(gsub('.*Autor: (.+)', '\\1', textos), c('Texto Original',
'Acompanhar Matéria',
'Norma.*',
'Data.*',
'Audiência.*'))),
NA) %>%
stringi::stri_trim_right()
autor[[i]] <- ifelse(str_detect(autores, 'Resultado'),
gsub('Resultado.*', '\\1', autores),
autores) %>%
str_trim()
#-----------------------------------------------------------------------------------------------------------
#                  LOCALIZACAO ATUAL
#-----------------------------------------------------------------------------------------------------------
loc_atual <- ifelse(str_detect(textos, 'Localização Atual'),
gsub('.*Localização Atual: (.+) Status.*', '\\1', textos),
NA)
localizacao_atual[[i]] <- ifelse(str_detect(textos, 'Localização Atual:'), loc_atual, NA)
#-----------------------------------------------------------------------------------------------------------
#                     EMENTAS
#-----------------------------------------------------------------------------------------------------------
ementas[[i]] <- ifelse(str_detect(textos, 'Ementa'),
gsub('.*Ementa: (.+) Apresentação.*', '\\1', textos))
#-----------------------------------------------------------------------------------------------------------
#                       STATUS
#-----------------------------------------------------------------------------------------------------------
status2 <- ifelse(str_detect(textos, 'Status'),
gsub('.*Status: (.+) Data Fim Prazo.*', '\\1', textos),
NA)
status[[i]] <- ifelse(str_detect(textos, 'Status:'), status2, NA)
#-----------------------------------------------------------------------------------------------------------
#                RESULTADO
#-----------------------------------------------------------------------------------------------------------
resultados <- ifelse(str_detect(textos, 'Resultado'),
ifelse(str_detect(textos, 'Data Votação'),
gsub('.*Resultado: (.+) Data Votação.*', '\\1', textos),
gsub('.*Resultado: (.+)', '\\1', textos)
),
NA)
resultados <- ifelse(str_detect(resultados, 'Data Da Última Tramitação'),
gsub('Data Da Última Tramitação.*', '\\1', resultados),
resultados)
resultado[[i]] <- str_remove_all(resultados, 'Texto Original') %>% str_trim()
print(i)
}
sapl_data <- tibble(num_projeto = unlist(num_projeto),
ementa = unlist(ementas),
data_apresentacao = unlist(data_apresentacao),
autor = unlist(autor),
localizacao_atual = unlist(localizacao_atual),
status = unlist(status),
resultado = unlist(resultado))
return(sapl_data)
}
tempo_inicial <- Sys.time()
sapl2021 <- sapl_scrap(URL = str_replace_all(string = 'https://sapl.al.ro.leg.br/materia/pesquisar-materia?page=PAGE&tipo=&ementa=&numero=&numeracao__numero_materia=&numero_protocolo=&ano=&o=&tipo_listagem=1&tipo_origem_externa=&numero_origem_externa=&ano_origem_externa=&data_origem_externa_0=&data_origem_externa_1=&local_origem_externa=&data_apresentacao_0=01%2F01%2FAAAA&data_apresentacao_1=31%2F12%2FAAAA&data_publicacao_0=&data_publicacao_1=&autoria__autor=&autoria__primeiro_autor=unknown&autoria__autor__tipo=&autoria__autor__parlamentar_set__filiacao__partido=&relatoria__parlamentar_id=&em_tramitacao=&tramitacao__unidade_tramitacao_destino=&tramitacao__status=&materiaassunto__assunto=&indexacao=',
pattern = 'AAAA', replacement = '2021'))
Sys.time() - tempo_inicial
sapl2021
sapl2021 %>% View()
tempo_inicial <- Sys.time()
sapl2020 <- sapl_scrap(URL = str_replace_all(string = 'https://sapl.al.ro.leg.br/materia/pesquisar-materia?page=PAGE&tipo=&ementa=&numero=&numeracao__numero_materia=&numero_protocolo=&ano=&o=&tipo_listagem=1&tipo_origem_externa=&numero_origem_externa=&ano_origem_externa=&data_origem_externa_0=&data_origem_externa_1=&local_origem_externa=&data_apresentacao_0=01%2F01%2FAAAA&data_apresentacao_1=31%2F12%2FAAAA&data_publicacao_0=&data_publicacao_1=&autoria__autor=&autoria__primeiro_autor=unknown&autoria__autor__tipo=&autoria__autor__parlamentar_set__filiacao__partido=&relatoria__parlamentar_id=&em_tramitacao=&tramitacao__unidade_tramitacao_destino=&tramitacao__status=&materiaassunto__assunto=&indexacao=',
pattern = 'AAAA', replacement = '2020'))
Sys.time() - tempo_inicial
sapl2020
sapl2020 %>% View()
tempo_inicial <- Sys.time()
sapl2019 <- sapl_scrap(URL = str_replace_all(string = 'https://sapl.al.ro.leg.br/materia/pesquisar-materia?page=PAGE&tipo=&ementa=&numero=&numeracao__numero_materia=&numero_protocolo=&ano=&o=&tipo_listagem=1&tipo_origem_externa=&numero_origem_externa=&ano_origem_externa=&data_origem_externa_0=&data_origem_externa_1=&local_origem_externa=&data_apresentacao_0=01%2F01%2FAAAA&data_apresentacao_1=31%2F12%2FAAAA&data_publicacao_0=&data_publicacao_1=&autoria__autor=&autoria__primeiro_autor=unknown&autoria__autor__tipo=&autoria__autor__parlamentar_set__filiacao__partido=&relatoria__parlamentar_id=&em_tramitacao=&tramitacao__unidade_tramitacao_destino=&tramitacao__status=&materiaassunto__assunto=&indexacao=',
pattern = 'AAAA', replacement = '2019'))
Sys.time() - tempo_inicial
sapl2019
sapl_data <- bind_rows(sapl2019, sapl2020, sapl2021)
sapl_data$data <- gsub(' De ', '', sapl_data$data_apresentacao) %>%
strptime(format = '%d %B %Y')
sapl_data <- sapl_data %>%
mutate(num_projeto = gsub('\\-.*', '', num_projeto),
data_apresentacao = format(lubridate::dmy(data_apresentacao), '%d/%m/%Y'),
mes_apresentacao = lubridate::month(data_apresentacao, label = TRUE, abbr = TRUE),
ano_apresentacao = as.character(substring(data_apresentacao, 7, 11)),
num_projeto = str_trim(num_projeto, side = 'right'))
saveRDS(sapl_data, file = 'sapl_data.rds')
readRDS(sapl_data)
readRDS('sapl_data.RDS')
# dados das materias ----
agrupamento_status <- read.table('agrupamento_status.txt', sep = '\t', header = TRUE) %>% as_tibble()
sapl_data <- merge(sapl_data, agrupamento_status, by = 'status')
sapl_data
sapl_data$status %>% table()
agrupamento_status
sapl_data$Grupo <- recode_factor(as.factor(sapl_data$Grupo),
'1' = 'Proposição Aprovada',
'2' = 'Proposição Rejeitada',
'3' = 'Em tramitação',
'4' = 'Proposição Retirada',
'NA' = 'NA')
sapl_data
runApp()
runApp()
sapl_data
sapl_data <- bind_rows(sapl2019, sapl2020, sapl2021)
# tratamento dos dados ----
for(i in 1: nrow(sapl_data)) {
if(grepl('PLO', as.character(sapl_data$num_projeto[i]), fixed = TRUE)) sapl_data$projeto[i] <- 'PLO'
if(grepl('PLC', as.character(sapl_data$num_projeto[i]), fixed = TRUE)) sapl_data$projeto[i] <- 'PLC'
if(grepl('PRE', as.character(sapl_data$num_projeto[i]), fixed = TRUE)) sapl_data$projeto[i] <- 'PRE'
if(grepl('PEC', as.character(sapl_data$num_projeto[i]), fixed = TRUE)) sapl_data$projeto[i] <- 'PEC'
if(grepl('VT', as.character(sapl_data$num_projeto[i]), fixed = TRUE)) sapl_data$projeto[i] <- 'VT'
if(grepl('VP', as.character(sapl_data$num_projeto[i]), fixed = TRUE)) sapl_data$projeto[i] <- 'VP'
if(grepl('IND', as.character(sapl_data$num_projeto[i]), fixed = TRUE)) sapl_data$projeto[i] <- 'IND'
if(grepl('REQ', as.character(sapl_data$num_projeto[i]), fixed = TRUE)) sapl_data$projeto[i] <- 'REQ'
if(grepl('ECM', as.character(sapl_data$num_projeto[i]), fixed = TRUE)) sapl_data$projeto[i] <- 'ECM'
if(grepl('PDL', as.character(sapl_data$num_projeto[i]), fixed = TRUE)) sapl_data$projeto[i] <- 'PDL'
}
sapl_data$data <- gsub(' De ', '', sapl_data$data_apresentacao) %>%
strptime(format = '%d %B %Y')
sapl_data <- sapl_data %>%
mutate(num_projeto = gsub('\\-.*', '', num_projeto),
data_apresentacao = format(lubridate::dmy(data_apresentacao), '%d/%m/%Y'),
mes_apresentacao = lubridate::month(data_apresentacao, label = TRUE, abbr = TRUE),
ano_apresentacao = as.character(substring(data_apresentacao, 7, 11)),
num_projeto = str_trim(num_projeto, side = 'right'))
saveRDS(sapl_data, file = 'sapl_data.rds')
runApp()
sapl_data %>% View()
sapl_data %>% count(resultado, projeto)
agrupamento_status
sapl_data %>% count(grupo, projeto)
sapl_data %>% count(Grupo, projeto)
runApp()
sapl_data
# dados das materias ----
agrupamento_status <- read.table('agrupamento_status.txt', sep = '\t', header = TRUE) %>% as_tibble()
readRDS('sapl_data.RDS')
sapl_data <- merge(sapl_data, agrupamento_status, by = 'status')
sapl_data$Grupo
# dados das materias ----
agrupamento_status <- read.table('agrupamento_status.txt', sep = '\t', header = TRUE) %>% as_tibble()
readRDS('sapl_data.RDS')
sapl_data <- merge(sapl_data, agrupamento_status, by = 'status')
sapl_data
readRDS('sapl_data.RDS')
sapl_data <- readRDS('sapl_data.RDS')
sapl_data <- merge(sapl_data, agrupamento_status, by = 'status')
sapl_data
runApp()
tempo_inicial <- Sys.time()
sapl2018 <- sapl_scrap(URL = str_replace_all(string = 'https://sapl.al.ro.leg.br/materia/pesquisar-materia?page=PAGE&tipo=&ementa=&numero=&numeracao__numero_materia=&numero_protocolo=&ano=&o=&tipo_listagem=1&tipo_origem_externa=&numero_origem_externa=&ano_origem_externa=&data_origem_externa_0=&data_origem_externa_1=&local_origem_externa=&data_apresentacao_0=01%2F01%2FAAAA&data_apresentacao_1=31%2F12%2FAAAA&data_publicacao_0=&data_publicacao_1=&autoria__autor=&autoria__primeiro_autor=unknown&autoria__autor__tipo=&autoria__autor__parlamentar_set__filiacao__partido=&relatoria__parlamentar_id=&em_tramitacao=&tramitacao__unidade_tramitacao_destino=&tramitacao__status=&materiaassunto__assunto=&indexacao=',
pattern = 'AAAA', replacement = '2018'))
Sys.time() - tempo_inicial
sapl2018
tempo_inicial <- Sys.time()
sapl2017 <- sapl_scrap(URL = str_replace_all(string = 'https://sapl.al.ro.leg.br/materia/pesquisar-materia?page=PAGE&tipo=&ementa=&numero=&numeracao__numero_materia=&numero_protocolo=&ano=&o=&tipo_listagem=1&tipo_origem_externa=&numero_origem_externa=&ano_origem_externa=&data_origem_externa_0=&data_origem_externa_1=&local_origem_externa=&data_apresentacao_0=01%2F01%2FAAAA&data_apresentacao_1=31%2F12%2FAAAA&data_publicacao_0=&data_publicacao_1=&autoria__autor=&autoria__primeiro_autor=unknown&autoria__autor__tipo=&autoria__autor__parlamentar_set__filiacao__partido=&relatoria__parlamentar_id=&em_tramitacao=&tramitacao__unidade_tramitacao_destino=&tramitacao__status=&materiaassunto__assunto=&indexacao=',
pattern = 'AAAA', replacement = '2017'))
Sys.time() - tempo_inicial
sapl2017
sapl2017$status %>% table()
saveRDS(sapl2017, file = 'data/sapl2017.rds')
saveRDS(sapl2018, file = 'data/sapl2018.rds')
saveRDS(sapl2019, file = 'data/sapl2019.rds')
saveRDS(sapl2020, file = 'data/sapl2020.rds')
saveRDS(sapl2021, file = 'data/sapl2021.rds')
list.files('dados/.RDS')
list.files('.RDS')
?list.files
list.files('dados', '.RDS')
list.files('dados/', '.RDS')
list.files('dados/', '.rds')
list.files('...dados/', '.rds')
list.files('...dados/', pattern = '.rds')
list.files('dados/', pattern = '.rds')
list.files('dados', pattern = '.rds')
list.files(pattern = '.rds')
list.files('~data', pattern = '.rds')
list.files('~data/', pattern = '.rds')
list.files('.data/', pattern = '.rds')
list.files('.data', pattern = '.rds')
list.files('/data', pattern = '.rds')
list.files('data/', pattern = '.rds')
install.packages('tidyverse')
library(tidyverse)
list.files('data/', pattern = '.rds') %>%
purrr::map(readRDS)
list.files('data/', pattern = '.rds') %>%
purrr::map(readRDS) %>%
bind_rows()
list.files('data/', pattern = '.rds')
list.files('data/', pattern = '.rds') %>%
purrr::map_dfr(readRDS) %>%
bind_rows()
list.files('data/', pattern = '.rds')
list.files('~data/', pattern = '.rds')
list.files('data/', pattern = '.rds')
list.files('/data/', pattern = '.rds')
list.files('data/', pattern = '.rds')
list.files('data/', pattern = '.rds') %>%
purrr::map_dfr(readRDS)
list.files('data/', pattern = '.RDS') %>%
purrr::map_dfr(readRDS)
list.files('data/', pattern = '.RDS')
list.files('data/', pattern = '.rds') %>%
purrr::map_dfr(readRDS)
?map_dfr
1:10 %>%
map(~ rnorm(10, .x))
list.files('data/', pattern = '.rds') %>% readRDS()
list.files('data/', pattern = '.rds') %>%
purrr::map_dfr(load) %>%
bind_rows()
list.files('data/', pattern = '.rds')
list.files('data/', pattern = '.rds')[1]
list.files('data/', pattern = '.rds')[1] %>% readRDS()
readRDS(list.files('data/', pattern = '.rds')[1])
readRDS(paste(list.files('data/', pattern = '.rds')[1]))
readRDS(~list.files('data/', pattern = '.rds')[1])
list.files('data/', pattern = '.rds') %>%
purrr::map_dfr(readRDS)
setwd("~/GitHub/painel_legislativo")
list.files('data/', pattern = '.rds') %>%
purrr::map_dfr(readRDS) %>%
bind_rows()
getwd()
list.files('https://github.com/caio-alero/painel_legislativo/tree/main/data', pattern = '.rds')
list.files('https://github.com/caio-alero/painel_legislativo/tree/main/data/', pattern = '.rds')
readRDS('https://github.com/caio-alero/painel_legislativo/blob/main/data/sapl2017.rds')
readRDS(url('https://github.com/caio-alero/painel_legislativo/blob/main/data/sapl2017.rds'))
readRDS(curl('https://github.com/caio-alero/painel_legislativo/blob/main/data/sapl2017.rds'))
readRDS(curl::curl('https://github.com/caio-alero/painel_legislativo/blob/main/data/sapl2017.rds'))
readRDS(curl::curl('https://github.com/caio-alero/painel_legislativo/blob/main/data/sapl2017.rds&raw=TRUE'))
readRDS(url('https://github.com/caio-alero/painel_legislativo/blob/main/data/sapl2017.rds&raw=TRUE'))
readRDS(url('https://github.com/caio-alero/painel_legislativo/blob/main/data/sapl2017.rds?raw=TRUE'))
url('https://github.com/caio-alero/painel_legislativo/blob/main/data/saplANO.rds?raw=TRUE') %>%
str_replace(pattern = 'ANO', 2017)
url('https://github.com/caio-alero/painel_legislativo/blob/main/data/saplANO.rds?raw=TRUE') %>%
str_replace(pattern = 'ANO', replacement = 2017)
url('https://github.com/caio-alero/painel_legislativo/blob/main/data/saplANO.rds?raw=TRUE') %>%
str_replace(pattern = 'ANO', replacement = '2017')
url('https://github.com/caio-alero/painel_legislativo/blob/main/data/saplANO.rds?raw=TRUE') %>%
str_replace(pattern = 'ANO', replacement = '2017') %>%
readRDS()
url('https://github.com/caio-alero/painel_legislativo/blob/main/data/saplANO.rds?raw=TRUE') %>%
str_replace(pattern = 'ANO', replacement = '2017')
url('https://github.com/caio-alero/painel_legislativo/blob/main/data/saplANO.rds?raw=TRUE')
str_replace('https://github.com/caio-alero/painel_legislativo/blob/main/data/saplANO.rds?raw=TRUE',
pattern = 'ANO', replacement = '2017') %>%
url()
str_replace('https://github.com/caio-alero/painel_legislativo/blob/main/data/saplANO.rds?raw=TRUE',
pattern = 'ANO', replacement = '2017') %>%
url() %>%
readRDS()
25000*24
paste0(2017:2021)
paste0(2017:2021)
u <- str_replace('https://github.com/caio-alero/painel_legislativo/blob/main/data/saplANO.rds?raw=TRUE',
pattern = 'ANO', replacement = paste0(2017:2021))
u
shiny::runApp()
runApp()
str_replace('https://github.com/caio-alero/painel_legislativo/blob/main/data/saplANO.rds?raw=TRUE',
pattern = 'ANO', replacement = paste0(2017:2021))
u <- str_replace('https://github.com/caio-alero/painel_legislativo/blob/main/data/saplANO.rds?raw=TRUE',
pattern = 'ANO', replacement = paste0(2017:2021))
urls <- str_replace('https://github.com/caio-alero/painel_legislativo/blob/main/data/saplANO.rds?raw=TRUE',
pattern = 'ANO', replacement = paste0(2017:2021))
list.files(path = 'data/',
pattern = '.rds')
list.files(path = 'data/',
pattern = '.rds', full.names = TRUE)
files <- list.files(path = 'data/',
pattern = '.rds')
do.call("rbind", lapply(files, readRDS))
files <- list.files(path = 'data/',
pattern = '.rds', full.names = TRUE)
do.call("rbind", lapply(files, readRDS))
files <- list.files(path = 'data/', pattern = '.rds', full.names = TRUE)
sapl_data <- do.call("bind_rows", lapply(files, readRDS))
sapl_data
library(rvest)      # web scrapping
library(dplyr)      # manipular dados
library(stringr)    # manipular os textos
library(xml2)       # ler html
library(jbkmisc)
library(tm)
# o código de scrape a seguir serve tanto para PLO como PLC
# tipos de materia: PLO, PLC, VP
# uma_pagina = TRUE ou FALSE
#sapl_scrap <- function(URL, tipo_materia = NULL, uma_pagina = FALSE) {
sapl_scrap <- function(URL, uma_pagina = FALSE) {
# extraindo o numero total de paginas
num_total_pages <- ifelse(uma_pagina,
1,
str_replace(URL, 'page=PAGE&', '') %>%
read_html() %>%
xml_find_all('//nav/ul') %>%
xml_text() %>%
str_clean() %>%
str_match_all('[0-9]+') %>%
unlist() %>%
as.numeric() %>%
max())
# scrapping das ementas
num_projeto <- list()
data_apresentacao <- list()
localizacao_atual <- list()
autor <- list()
ementas <- list()
status <- list()
data_ultima_tram <- list()
resultado <- list()
for(i in 1:num_total_pages) {
url <- str_replace(URL, 'PAGE', as.character(i))
pagina <- read_html(url) %>% xml_root()
# numero de materia
nodes_link <- xml_find_all(pagina, '//td//a')
#num_projeto[[i]] <- xml_text(nodes_link)[str_detect(xml_text(nodes_link), tipo_materia)]
num_projeto[[i]] <- xml_text(nodes_link)[!(xml_text(nodes_link) %in% c('Texto Original', '', 'Acompanhar Matéria'))]
num_projeto[[i]] <- num_projeto[[i]][!str_detect(num_projeto[[i]], pattern = '\n')]
# textos
textos <- xml_find_all(pagina, '//td') %>%
xml_text() %>%
str_clean()
textos <- textos[textos != ' ']
textos <- textos[-1]
#-----------------------------------------------------------------------------------------------------------
#                 data de apresentacao
#-----------------------------------------------------------------------------------------------------------
data_apresentacao[[i]] <- xml_find_all(pagina, '//td/text()[6]') %>%
xml_text() %>%
str_clean() %>%
str_trim()
#-----------------------------------------------------------------------------------------------------------
#                  AUTORIA
#-----------------------------------------------------------------------------------------------------------
autores <- ifelse(str_detect(textos, 'Autor: '),
ifelse(str_detect(textos, 'Localização Atual'),
gsub('.*Autor: (.+) Localização Atual.*', '\\1', textos),
removeWords(gsub('.*Autor: (.+)', '\\1', textos), c('Texto Original',
'Acompanhar Matéria',
'Norma.*',
'Data.*',
'Audiência.*'))),
NA) %>%
stringi::stri_trim_right()
autor[[i]] <- ifelse(str_detect(autores, 'Resultado'),
gsub('Resultado.*', '\\1', autores),
autores) %>%
str_trim()
#-----------------------------------------------------------------------------------------------------------
#                  LOCALIZACAO ATUAL
#-----------------------------------------------------------------------------------------------------------
loc_atual <- ifelse(str_detect(textos, 'Localização Atual'),
gsub('.*Localização Atual: (.+) Status.*', '\\1', textos),
NA)
localizacao_atual[[i]] <- ifelse(str_detect(textos, 'Localização Atual:'), loc_atual, NA)
#-----------------------------------------------------------------------------------------------------------
#                     EMENTAS
#-----------------------------------------------------------------------------------------------------------
ementas[[i]] <- ifelse(str_detect(textos, 'Ementa'),
gsub('.*Ementa: (.+) Apresentação.*', '\\1', textos))
#-----------------------------------------------------------------------------------------------------------
#                       STATUS
#-----------------------------------------------------------------------------------------------------------
status2 <- ifelse(str_detect(textos, 'Status'),
gsub('.*Status: (.+) Data Fim Prazo.*', '\\1', textos),
NA)
status[[i]] <- ifelse(str_detect(textos, 'Status:'), status2, NA)
#-----------------------------------------------------------------------------------------------------------
#                RESULTADO
#-----------------------------------------------------------------------------------------------------------
resultados <- ifelse(str_detect(textos, 'Resultado'),
ifelse(str_detect(textos, 'Data Votação'),
gsub('.*Resultado: (.+) Data Votação.*', '\\1', textos),
gsub('.*Resultado: (.+)', '\\1', textos)
),
NA)
resultados <- ifelse(str_detect(resultados, 'Data Da Última Tramitação'),
gsub('Data Da Última Tramitação.*', '\\1', resultados),
resultados)
resultado[[i]] <- str_remove_all(resultados, 'Texto Original') %>% str_trim()
print(i)
}
sapl_data <- tibble(num_projeto = unlist(num_projeto),
ementa = unlist(ementas),
data_apresentacao = unlist(data_apresentacao),
autor = unlist(autor),
localizacao_atual = unlist(localizacao_atual),
status = unlist(status),
resultado = unlist(resultado))
return(sapl_data)
}
# tratamento dos dados ----
for(i in 1: nrow(sapl_data)) {
if(grepl('PLO', as.character(sapl_data$num_projeto[i]), fixed = TRUE)) sapl_data$projeto[i] <- 'PLO'
if(grepl('PLC', as.character(sapl_data$num_projeto[i]), fixed = TRUE)) sapl_data$projeto[i] <- 'PLC'
if(grepl('PRE', as.character(sapl_data$num_projeto[i]), fixed = TRUE)) sapl_data$projeto[i] <- 'PRE'
if(grepl('PEC', as.character(sapl_data$num_projeto[i]), fixed = TRUE)) sapl_data$projeto[i] <- 'PEC'
if(grepl('VT', as.character(sapl_data$num_projeto[i]), fixed = TRUE)) sapl_data$projeto[i] <- 'VT'
if(grepl('VP', as.character(sapl_data$num_projeto[i]), fixed = TRUE)) sapl_data$projeto[i] <- 'VP'
if(grepl('IND', as.character(sapl_data$num_projeto[i]), fixed = TRUE)) sapl_data$projeto[i] <- 'IND'
if(grepl('REQ', as.character(sapl_data$num_projeto[i]), fixed = TRUE)) sapl_data$projeto[i] <- 'REQ'
if(grepl('ECM', as.character(sapl_data$num_projeto[i]), fixed = TRUE)) sapl_data$projeto[i] <- 'ECM'
if(grepl('PDL', as.character(sapl_data$num_projeto[i]), fixed = TRUE)) sapl_data$projeto[i] <- 'PDL'
}
sapl_data$data <- gsub(' De ', '', sapl_data$data_apresentacao) %>%
strptime(format = '%d %B %Y')
sapl_data <- sapl_data %>%
mutate(num_projeto = gsub('\\-.*', '', num_projeto),
data_apresentacao = format(lubridate::dmy(data_apresentacao), '%d/%m/%Y'),
mes_apresentacao = lubridate::month(data_apresentacao, label = TRUE, abbr = TRUE),
ano_apresentacao = as.character(substring(data_apresentacao, 7, 11)),
num_projeto = str_trim(num_projeto, side = 'right'))
sapl_data %>% count(ano_apresentacao)
sapl_data %>% count(ano_apresentacao, projeto)
sapl_data %>% count(ano_apresentacao, projeto) %>% filter(ano_apresentacao == 2020)
sapl_data %>% count(ano_apresentacao, projeto, autor) %>% filter(ano_apresentacao == 2020)
sapl_data %>% count(ano_apresentacao, projeto, autor) %>% filter(ano_apresentacao == 2020) %>% View()
sapl_data %>% filter(ano_apresentacao == 2020, projeto = 'IND')
sapl_data %>% filter(ano_apresentacao == 2020, projeto == 'IND')
sapl_data %>% filter(ano_apresentacao == 2020, projeto == 'IND') %>% View()
sapl_data %>% filter(ano_apresentacao == 2020, projeto == 'IND', autor == 'NA') %>% View()
sapl_data %>% filter(ano_apresentacao == 2020, projeto == 'IND', autor == NA) %>% View()
sapl_data %>% filter(ano_apresentacao == 2020, projeto == 'IND', is.na(autor)) %>% View()
sapl_data %>% count(ano_apresentacao)
17.25*4
